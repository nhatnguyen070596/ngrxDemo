import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { Store, select } from '@ngrx/store';
import { Product } from './model/product.model';
import { Observable } from 'rxjs';
import { selectAllProducts } from './store/selectors/product.selectors';
import { selectAllSchedules } from './store/selectors/schedule.selectors';
import { loadProducts } from './store/actions/product.action';
import { addSchedule, loadSchedule } from './store/actions/schedule.action';
import { Schedule } from './model/schedule.model';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    RouterOutlet,  
    CommonModule,FormsModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  products$: Observable<Product[]>;
  schedules$: Observable<Schedule[]>;
  showAddSchedulePopup: boolean = false;
  newSchedule: Schedule = {
    schId: 0,  // This will typically be generated by the backend or a unique identifier service
    schType: 0,
    staffName: '',
    staffId: 0,
    isActive: false,
    description: ''
  };

  constructor(private store: Store) {
    this.products$ = this.store.pipe(select(selectAllProducts));
    this.schedules$ = this.store.pipe(select(selectAllSchedules));
    this.store.dispatch(loadProducts());
    this.store.dispatch(loadSchedule());
  }
  ngOnInit(): void {
    // Dispatch the action to load schedules when the component initializes
    this.store.dispatch(loadSchedule());

    // Subscribe to the schedule list from the store
    this.schedules$ = this.store.pipe(select(selectAllSchedules));

  }
  onAddSchedule(): void {
    // Dispatch the action to add a new schedule
    const newScheduleToAdd = {
      ...this.newSchedule
    };

    this.store.dispatch(addSchedule({ schedule: newScheduleToAdd }));
    this.closeAddSchedulePopup();
    this.resetForm();
  }

  resetForm(): void {
    this.newSchedule = {
      schId: 0,
      schType: 0,
      staffName: '',
      staffId: 0,
      isActive: false,
      description: ''
    };
  }
  openAddSchedulePopup(): void {
    this.showAddSchedulePopup = true;
  }

  closeAddSchedulePopup(): void {
    this.showAddSchedulePopup = false;
  }
  title = 'ngrx-managementHN';
}

